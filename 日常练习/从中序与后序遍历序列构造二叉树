/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        TreeNode*root=new TreeNode;
        if (postorder.empty() || inorder.empty())
            return root;
        _buildTree(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,root);
        return root;
    }
    TreeNode*_buildTree(vector<int>& inorder,int inbefo,int inend, vector<int>& postorder,int pobefo,int poend,TreeNode*root)
    {
        root->val=postorder[poend];
        int llength=0,rlength=0,rootpos=0;
        for(int i=inbefo;i<=inend;i++)
            if(inorder[i]==root->val)
                {
                    rootpos=i;
                    break;
                }
        llength=rootpos-inbefo;
        rlength=inend-rootpos;
        if(llength>0)
        {
            TreeNode*leftchild=new TreeNode;
            root->left=_buildTree(inorder,inbefo,rootpos-1,postorder,pobefo,pobefo+llength-1,leftchild);
        }
        else
            root->left=nullptr;//不写这句也可以,因为节点默认构造函数已经将左右指针设为nullptr,但写出来可以方便理解
        if(rlength>0)
        {
            TreeNode*rightchild=new TreeNode;
            root->right=_buildTree(inorder,rootpos+1,inend,postorder,pobefo+llength,poend-1,rightchild);
        }
        else
            root->right=nullptr;
        return root;
    }
};